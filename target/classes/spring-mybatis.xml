<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">  
    <!-- 自动扫描 -->  
    <context:component-scan base-package="com.yuanjun" />  
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean> 
    <!-- 配置主库数据源 --> 
    <bean id="masterDataSource"  
        class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close">  
        <property name="driverClassName" value="${jdbc.master.driver}" />  
        <property name="url" value="${jdbc.master.url}" />  
        <property name="username" value="${jdbc.master.username}" />  
        <property name="password" value="${jdbc.master.password}" /> 
         <property name = "filters" value = "${filters}" />    
        <!-- 最大并发连接数 -->  
       <property name = "maxActive" value = "${maxActive}" />  
       <!-- 初始化连接数量 -->  
       <property name = "initialSize" value = "${initialSize}" />  
       <!-- 配置获取连接等待超时的时间 -->  
       <property name = "maxWait" value = "${maxWait}" />  
       <!-- 最小空闲连接数 -->  
       <property name = "minIdle" value = "${minIdle}" />    
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
       <property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />  
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
       <property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />    
		<!--        <property name = "validationQuery" value = "${validationQuery}" />     -->
       <property name = "testWhileIdle" value = "${testWhileIdle}" />    
       <property name = "testOnBorrow" value = "${testOnBorrow}" />    
       <property name = "testOnReturn" value = "${testOnReturn}" />    
       <property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />  
       <!-- 打开 removeAbandoned 功能 -->  
       <property name = "removeAbandoned" value = "${removeAbandoned}" />  
       <!-- 1800 秒，也就是 30 分钟 -->  
       <property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />  
       <!-- 关闭 abanded 连接时输出错误日志 -->     
       <property name = "logAbandoned" value = "${logAbandoned}" /> 
       <property name="proxyFilters">
            <list>
                <ref bean="wall-filter"/>
                <ref bean="stat-filter"/>
                <ref bean="log-filter"/>
            </list>
        </property> 
    </bean>
      
   <!-- 配置从库数据源 --> 
    <bean id="slave01DataSource"  
       class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close">  
        <property name="driverClassName" value="${jdbc.slave01.driver}"/>  
        <property name="url" value="${jdbc.slave01.url}"/>  
        <property name="username" value="${jdbc.slave01.username}"/>  
        <property name="password" value="${jdbc.slave01.password}"/>
         <property name = "filters" value = "${filters}" />    
        <!-- 最大并发连接数 -->  
       <property name = "maxActive" value = "${maxActive}" />  
       <!-- 初始化连接数量 -->  
       <property name = "initialSize" value = "${initialSize}" />  
       <!-- 配置获取连接等待超时的时间 -->  
       <property name = "maxWait" value = "${maxWait}" />  
       <!-- 最小空闲连接数 -->  
       <property name = "minIdle" value = "${minIdle}" />    
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
       <property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />  
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
       <property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />    
		<!--        <property name = "validationQuery" value = "${validationQuery}" />     -->
       <property name = "testWhileIdle" value = "${testWhileIdle}" />    
       <property name = "testOnBorrow" value = "${testOnBorrow}" />    
       <property name = "testOnReturn" value = "${testOnReturn}" />    
       <property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />  
       <!-- 打开 removeAbandoned 功能 -->  
       <property name = "removeAbandoned" value = "${removeAbandoned}" />  
       <!-- 1800 秒，也就是 30 分钟 -->  
       <property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />  
       <!-- 关闭 abanded 连接时输出错误日志 -->     
       <property name = "logAbandoned" value = "${logAbandoned}" /> 
       <property name="proxyFilters">
            <list>
                <ref bean="wall-filter"/>
                <ref bean="stat-filter"/>
                <ref bean="log-filter"/>
            </list>
        </property>
    </bean> 
  
  	 <!-- 慢SQL记录 -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- 慢sql时间设置,即执行时间大于200毫秒的都是慢sql -->
        <property name="slowSqlMillis" value="2000"/>
        <property name="logSlowSql" value="true"/>
    </bean>

    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="dataSourceLogEnabled" value="true" />
        <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>

    <!-- 防御SQL攻击 -->
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">  
        <property name="config" ref="wall-config" />  
        <property name="logViolation" value="true" />  
<!--         <property name="throwException" value="false" />   -->
    </bean>  

    <bean id="wall-config" class="com.alibaba.druid.wall.WallConfig">  
        <property name="deleteAllow" value="false" />  
        <property name="truncateAllow" value="false" />  
        <property name="dropTableAllow" value="false" />  
        <property name="alterTableAllow" value="false" />  
        <property name="deleteWhereNoneCheck" value="false" />  
        <property name="updateWhereNoneCheck" value="false" />  

    </bean> 



    <!-- druid  spring监控   start -->
    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
            		<value>com.yuanjun.service.*</value> 
                  <value>com.yuanjun.dao.*</value> 
            </list>
        </property>
    </bean>


    <!-- 创建基于类的代理 -->
    <aop:config proxy-target-class="false">
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>
  
  
  	<bean id="dataSource" class="com.yuanjun.spring.DynamicDataSource">
	<!-- 设置多个数据源 -->
	<property name="targetDataSources">
	<map key-type="java.lang.String">
	<!-- 这个key需要和程序中的key一致 -->
	<entry key="master" value-ref="masterDataSource"/>
	<entry key="slave" value-ref="slave01DataSource"/>
	</map>
	</property>
	<!-- 设置默认的数据源，这里默认走写库 -->
	<property name="defaultTargetDataSource" ref="masterDataSource"/>
	</bean>
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/yuanjun/mapping/*.xml"></property>  
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.yuanjun.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
  
   <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <!--定义查询方法都是只读的 -->  
            <tx:method name="query*" read-only="true" />  
            <tx:method name="find*" read-only="true" />  
            <tx:method name="get*" read-only="true" />  
  
            <!-- 主库执行操作，事务传播行为定义为默认行为 -->  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
  
            <!--其他方法使用默认事务策略 -->  
            <tx:method name="*" />  
        </tx:attributes>  
    </tx:advice>
   <!-- 定义AOP切面处理器 -->  
    <bean class="com.yuanjun.spring.DataSourceAspect" id="dataSourceAspect" />  
  
    <aop:config>  
        <!-- 定义切面，拦截com.yuanjun.service包下的所有方法 -->  
        <aop:pointcut id="txPointcut" expression="execution(* com.yuanjun.service.*.*(..))" />  
        <!-- 应用事务策略到Service切面 -->  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>  
          
        <!-- 将切面应用到自定义的切面处理器上，-9999保证该切面优先级最高执行 -->  
        <aop:aspect ref="dataSourceAspect" order="-9999">  
            <aop:before method="before" pointcut-ref="txPointcut" />  
        </aop:aspect>  
    </aop:config>  
</beans>  